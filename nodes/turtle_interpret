#!/usr/bin/env python
"""
Translates a custom velocity message into a geometry_msgs/Twist that can be
used by the turtlesim.

SUBSCRIBERS:
    turtle_vel (TurtleVel): planar linear and angular velocity of the turtle

PUBLISHERS:
    cmd_vel (Twist): all 3D velocity components of the turtle

SERVICES:
    vel_translate (VelTranslate): converts a geometry_msgs/Twist into a
        TurtleVel message
"""

import rospy
from turtle_control.msg import TurtleVel
from geometry_msgs.msg import Twist, Vector3
from turtle_control.srv import VelTranslate, VelTranslateResponse


def turtle_twist(linear, angular):
    """ Create a twist suitable for a turtle

        Args:
            linear (float): planar forward velocity of the turtle
            angular (float): planar angular velocity of the turtle

        Returns:
            Twist : a 3D twist object corresponding to planar linear/angular
                velocity
    """
    return Twist(linear=Vector3(x=linear, y=0, z=0),
                 angular=Vector3(x=0, y=0, z=angular))


class TurtleInterpret:
    """ Interprets Twist velocities as TurtleVel velocities. """
    def __init__(self):
        self.__turtle_vel_sub = rospy.Subscriber('turtle_vel', TurtleVel,
                                                 self.turtle_vel_callback)
        self.__cmd_vel_pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
        self.__vel_translate = rospy.Service('vel_translate', VelTranslate,
                                             self.vel_translate_callback)

    def turtle_vel_callback(self, data):
        """ Used as the 'turtle_vel' callback.

            Args:
                data (TurtleVel): the received turtle_vel message data
        """
        rospy.logdebug("Linear velocity of turtle = %f, angular velocity of \
            turtle = %f", data.linear, data.angular)
        self.__cmd_vel_pub.publish(turtle_twist(data.linear, data.angular))

    def vel_translate_callback(self, req):
        """ Callback function for the vel_translate service

            Converts a geometry_msgs/Twist into a TurtleVel message

            Args:
                req (VelTranslateRequest): contains a Twist message

            Returns:
                res (VelTranslateResponse): contains a TurtleVel message
        """
        vx = req.twist.linear.x
        vy = req.twist.linear.y
        vz = req.twist.linear.z
        wx = req.twist.angular.x
        wy = req.twist.angular.y
        wz = req.twist.angular.z

        if vy != 0 or vz != 0 or wx != 0 or wy != 0:
            res = VelTranslateResponse(TurtleVel(None))  # throws an error
        else:
            res = VelTranslateResponse(TurtleVel(linear=vx, angular=wz))

        return res


def main():
    """ The main() function. """
    rospy.init_node('turtle_interpret')
    TurtleInterpret()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
